package com.wechat.util;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import net.sf.json.JSONObject;

public class TokenUtil {
	public static Properties pro = null;
	
	public static  void init() {		
		pro = new Properties();
		InputStream in;
		try {
			in =  TokenUtil.class.getClassLoader().getResourceAsStream("wechatSecret.properties");
			pro.load(in);
			in.close();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}        
	}
	
	public static String getValue(String key){
		if(pro == null){
			init();
		}
		String value = pro.getProperty(key);
		return value;
	}
	
	public static String getRequestUrl(String[] key,String url){
		String  newUrl = null;
		for(int i = 0;i<key.length;i++){
			newUrl = url.replace("0"+key[i]+"0",getValue(key[i]));
			url = newUrl;
		}
		return newUrl;
	}
	
	public static String getToken() throws IOException {
		String TokenUrl = getValue("TokenUrl");
		String[] cs = { "AppID", "AppSecret", "grant_type" };
		String generalUrl = getRequestUrl(cs, TokenUrl);
		System.out.println(generalUrl);
		URL url = new URL(generalUrl);
		// 打开和URL之间的连接
		HttpURLConnection connection = (HttpURLConnection) url.openConnection();
		connection.setRequestMethod("GET");
		// 设置通用的请求属性
		connection.setRequestProperty("Content-Type", "application/json");
		connection.setRequestProperty("Connection", "Keep-Alive");
		connection.setUseCaches(false);
		connection.setDoOutput(true);
		connection.setDoInput(true);

		// 得到请求的输出流对象
		DataOutputStream out = new DataOutputStream(
				connection.getOutputStream());
		// out.writeBytes(params);
		out.flush();
		out.close();

		// 建立实际的连接
		connection.connect();
		// 获取所有响应头字段
		Map<String, List<String>> headers = connection.getHeaderFields();
		// 遍历所有的响应头字段
		for (String key : headers.keySet()) {
			System.out.println(key + "--->" + headers.get(key));
		}
		// 定义 BufferedReader输入流来读取URL的响应
		BufferedReader in = null;
		if (generalUrl.contains("nlp"))
			in = new BufferedReader(new InputStreamReader(
					connection.getInputStream(), "GBK"));
		else
			in = new BufferedReader(new InputStreamReader(
					connection.getInputStream(), "UTF-8"));
		String result = "";
		String getLine;
		while ((getLine = in.readLine()) != null) {
			result += getLine;
		}
		in.close();
		System.out.println("result:" + result);
		JSONObject json = JSONObject.fromObject(result);
		String access_token = (String) json.get("access_token");
		return access_token;
	}
	
	public static void main(String[] args) throws IOException{
		System.out.println(getToken());
	}
}
